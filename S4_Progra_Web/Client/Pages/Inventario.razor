@page "/inventario"
@using S4_Progra_Web.Shared.Modelos;
@inject HttpClient _http
@inject NavigationManager _navegar
@inject IJSRuntime _JsRuntime
<h3>Cubos</h3>
@if (ins)
{
    <EditForm Model="elCube" OnValidSubmit="Guardar">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label for="name" class="col-sm-2 col-form-label">Nombre: </label>
            <InputText class="form-control" id="name" @bind-Value="elCube.Nombre" />
            <ValidationMessage For="@(()=>elCube.Nombre)" />
        </div>
        <div class="mb-3">
            <label for="email" class="col-sm-2 col-form-label">Modelo: </label>
            <InputText class="form-control" id="email" @bind-Value="elCube.Modelo" />
            <ValidationMessage For="@(()=>elCube.Modelo)" />
        </div>
        <div class="mb-3">
            <label for="cal" class="col-sm-2 col-form-label">Precio: </label>
            <InputNumber class="form-control" id="cal" @bind-Value="elCube.Precio" />
            <ValidationMessage For="@(()=>elCube.Precio)" />
        </div>
        <div class="mb-3">
            <label for="cal" class="col-sm-2 col-form-label">Cantidad: </label>
            <InputNumber class="form-control" id="cal" @bind-Value="elCube.Cantidad" />
            <ValidationMessage For="@(()=>elCube.Cantidad)" />
        </div>
        <div class="mb-3">
            <!--
            <label for="cal" class="col-sm-2 col-form-label">Id Proveedor: </label>
            <InputNumber class="form-control" id="cal" @bind-Value="elCube.ProveedorId" />
            -->
            <label for="cal" class="col-sm-2 col-form-label">Id Proveedor: </label>
            <InputSelect @bind-Value="elCube.ProveedorId" class="w-25 p-2">
                <option value="0" selected>Selecciona un Proveedor...</option>
                @foreach (var c in proveedores)
                {
                    <option value="@c.IdProveedor">@c.ProveedorName</option>
                }
            </InputSelect>
            <ValidationMessage For="@(()=>elCube.ProveedorId)" />
        </div>
        <button type="submit" class="btn btn-primary">Enviar</button>
        <button type="button" class="btn btn-primary" @onclick="cancel">Cancelar</button>

    </EditForm>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="insert">Agregar Producto</button>
    @if (Cubes.Count > 0)
    {
        <table class="table table-striped">
            <thead>
                <tr style="width: 90%">
                    <th>Nombre</th>
                    <th>Modelo</th>
                    <th>Precio</th>
                    <th>Cantidad</th>
                    <th>Id Proveedor</th>
                    <th>Id</th>
                    <th>Acción</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Cubes.Count; i++)
                {
                    var indice = Cubes[i].id;
                    <tr>
                        <td>@Cubes[i].Nombre</td>
                        <td>@Cubes[i].Modelo</td>
                        <td>@Cubes[i].Precio</td>
                        <td>@Cubes[i].Cantidad</td>
                        <td>@Cubes[i].ProveedorId</td>
                        <td>@Cubes[i].id</td>
                        <td class="text-center">
                            <span style="margin:3%" class="oi oi-pencil" @onclick="() => modificar(indice)"></span>
                            <span style="margin:3%" class="oi oi-trash" @onclick="() => eliminar(indice)"></span>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <h3>No hay elementos en el inventario</h3>
    }
}
@code {
    public List<Cube> Cubes = new();
    public Cube elCube = new();
    public bool ins = false;
    public HttpResponseMessage? res;
    public List<Proveedor> proveedores = new();
    public string aux;

    // consulta para tabla
    protected override async Task OnInitializedAsync()
    {
        Cubes = await _http.GetFromJsonAsync<List<Cube>>("https://localhost:7234/api/Cubes");

    }

    //llamada para inseertar
    private async Task insert()
    {
        proveedores = await _http.GetFromJsonAsync<List<Proveedor>>("https://localhost:7234/api/Proveedors");
        ins = true;

    }
    private void cancel()
    {
        ins = false;
        proveedores = new();
    }


    private async Task Guardar()
    {
        res = await _http.PostAsJsonAsync("/api/Cubes", elCube);
        Cubes = await _http.GetFromJsonAsync<List<Cube>>("https://localhost:7234/api/Cubes");
        elCube = new();
        // PONER  UNA NOTIFICACION DE EXITO
        @if (res.IsSuccessStatusCode)
        {
            await _JsRuntime.InvokeVoidAsync("alert", "Cubo añadido corectamente"); // Alert
            /*
             * await _JsRuntime.InvokeVoidAsync("alert", "Warning!"); // Alert
             * bool confirmed = await _JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?"); // Confirm
             * string prompted = await _JsRuntime.InvokeAsync<string>("prompt", "Take some input:");
             */
        }
        else
        {
            await _JsRuntime.InvokeVoidAsync("alert", "Error al añadir el elemento, intente mas tarde.");
        }
    }
    private async Task eliminar(int i)
    {
        bool confirmed = await _JsRuntime.InvokeAsync<bool>("confirm", "¿Esta seguro de eliminar el registro?"); // Confirm
        if (confirmed)
        {
            await _http.DeleteAsync($"/api/Cubes/{i}");
            //_navegar.NavigateTo("/Personas");
            Cubes = await _http.GetFromJsonAsync<List<Cube>>("https://localhost:7234/api/Cubes");
        }
    }
    private void modificar(int i)
    {
        _navegar.NavigateTo("/editcube/"+i);
    }
}
