@page "/Personas"
@using S4_Progra_Web.Shared.Modelos;
@inject HttpClient _http
@inject NavigationManager _navegar
<h3>Personas</h3>

<EditForm Model="elCube" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="name" class="col-sm-2 col-form-label">Nombre: </label>
        <InputText class="form-control" id="name" @bind-Value="elCube.Nombre"/>
        <ValidationMessage For="@(()=>elCube.Nombre)"/>
    </div>
    <div class="mb-3">
        <label for="email" class="col-sm-2 col-form-label">Modelo: </label>
        <InputText class="form-control" id="email" @bind-Value="elCube.Modelo" />
        <ValidationMessage For="@(()=>elCube.Modelo)" />
    </div>
    <div class="mb-3">
        <label for="cal" class="col-sm-2 col-form-label">Precio: </label>
        <InputNumber class="form-control" id="cal" @bind-Value="elCube.Precio" />
        <ValidationMessage For="@(()=>elCube.Precio)" />
    </div>
    <div class="mb-3">
        <label for="cal" class="col-sm-2 col-form-label">Cantidad: </label>
        <InputNumber class="form-control" id="cal" @bind-Value="elCube.Cantidad" />
        <ValidationMessage For="@(()=>elCube.Cantidad)" />
    </div>
    <div class="mb-3">
        <label for="cal" class="col-sm-2 col-form-label">Id Proveedor: </label>
        <InputNumber class="form-control" id="cal" @bind-Value="elCube.ProveedorId" />
        <ValidationMessage For="@(()=>elCube.ProveedorId)" />
    </div>
    <button type="submit" class="btn btn-primary">Enviar</button>
</EditForm>

@if (Cubes.Count > 0)
{
    <table class="table table-striped">
        <thead>
            <tr style="width: 90%">
                <th>Nombre</th>
                <th>Modelo</th>
                <th>Precio</th>
                <th>Cantidad</th>
                <th>Id Proveedor</th>
                <th>Id</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Cubes.Count; i++)
            {
                var indice = Cubes[i].id;
                <tr>
                    <td>@Cubes[i].Nombre</td>
                    <td>@Cubes[i].Modelo</td>
                    <td>@Cubes[i].Precio</td>
                    <td>@Cubes[i].Cantidad</td>
                    <td>@Cubes[i].ProveedorId</td>
                    <td>@Cubes[i].id</td>
                    <td class="text-center">
                        <span class="oi oi-trash" @onclick="() => eliminar(indice)"></span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    public List<Cube> Cubes = new();
    public Cube elCube = new();
    protected override async Task OnInitializedAsync()
    {
        Cubes = await _http.GetFromJsonAsync<List<Cube>>("https://localhost:7234/api/Cubes");

    }
    private async Task Guardar()
    {
        await _http.PostAsJsonAsync("/api/Cubes", elCube);
        _navegar.NavigateTo("/Personas");
        Cubes = await _http.GetFromJsonAsync<List<Cube>>("https://localhost:7234/api/Cubes");
        elCube = new();
    }
    private async Task eliminar(int i)
    {
        await _http.DeleteAsync($"/api/Cubes/{i}");
        _navegar.NavigateTo("/Personas");
        Cubes = await _http.GetFromJsonAsync<List<Cube>>("https://localhost:7234/api/Cubes");
    }
}
